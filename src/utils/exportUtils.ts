interface ReportData {
  period: string;
  category: string;
  activities: any[];
  stats: any;
  userStats: any;
  generatedAt: string;
}

export const exportToPDF = async (data: ReportData): Promise<void> => {
  // Create a printable HTML version
  const printWindow = window.open('', '_blank');
  if (!printWindow) return;

  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Carbon Footprint Report</title>
      <style>
        body { 
          font-family: Arial, sans-serif; 
          margin: 20px; 
          color: #333;
          background: white;
        }
        .header { 
          text-align: center; 
          margin-bottom: 30px; 
          border-bottom: 2px solid #10b981;
          padding-bottom: 20px;
        }
        .stats-grid { 
          display: grid; 
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
          gap: 20px; 
          margin: 20px 0; 
        }
        .stat-card { 
          border: 1px solid #e5e7eb; 
          padding: 15px; 
          border-radius: 8px;
          background: #f9fafb;
        }
        .stat-value { 
          font-size: 24px; 
          font-weight: bold; 
          color: #10b981; 
        }
        .activities-table { 
          width: 100%; 
          border-collapse: collapse; 
          margin: 20px 0; 
        }
        .activities-table th, .activities-table td { 
          border: 1px solid #e5e7eb; 
          padding: 8px; 
          text-align: left; 
        }
        .activities-table th { 
          background: #f3f4f6; 
          font-weight: bold; 
        }
        .category-breakdown { 
          margin: 20px 0; 
        }
        .category-item { 
          display: flex; 
          justify-content: space-between; 
          padding: 10px 0; 
          border-bottom: 1px solid #e5e7eb; 
        }
        @media print {
          body { margin: 0; }
          .no-print { display: none; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>üå± Carbon Footprint Report</h1>
        <p>Period: ${data.period.charAt(0).toUpperCase() + data.period.slice(1)} | Category: ${data.category}</p>
        <p>Generated: ${new Date(data.generatedAt).toLocaleDateString()}</p>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <h3>Total Emissions</h3>
          <div class="stat-value">${data.stats.totalEmissions.toFixed(1)} kg CO‚ÇÇ</div>
        </div>
        <div class="stat-card">
          <h3>Daily Average</h3>
          <div class="stat-value">${data.stats.averageDaily.toFixed(1)} kg CO‚ÇÇ</div>
        </div>
        <div class="stat-card">
          <h3>Total Activities</h3>
          <div class="stat-value">${data.stats.totalActivities}</div>
        </div>
        <div class="stat-card">
          <h3>User Level</h3>
          <div class="stat-value">${data.userStats.level}</div>
        </div>
      </div>

      <div class="category-breakdown">
        <h2>Category Breakdown</h2>
        ${Object.entries(data.stats.categoryBreakdown).map(([category, emissions]: [string, any]) => `
          <div class="category-item">
            <span>${category.charAt(0).toUpperCase() + category.slice(1)}</span>
            <span>${emissions.toFixed(1)} kg CO‚ÇÇ</span>
          </div>
        `).join('')}
      </div>

      <h2>Recent Activities</h2>
      <table class="activities-table">
        <thead>
          <tr>
            <th>Date</th>
            <th>Category</th>
            <th>Description</th>
            <th>Emissions (kg CO‚ÇÇ)</th>
          </tr>
        </thead>
        <tbody>
          ${data.activities.slice(0, 20).map(activity => `
            <tr>
              <td>${new Date(activity.date).toLocaleDateString()}</td>
              <td>${activity.type}</td>
              <td>${activity.description}</td>
              <td>${activity.emissions.toFixed(2)}</td>
            </tr>
          `).join('')}
        </tbody>
      </table>

      <div style="margin-top: 40px; text-align: center; color: #6b7280; font-size: 12px;">
        <p>Generated by EcoTracker - Carbon Footprint Monitor</p>
      </div>
    </body>
    </html>
  `;

  printWindow.document.write(htmlContent);
  printWindow.document.close();
  
  // Wait for content to load then print
  setTimeout(() => {
    printWindow.print();
  }, 500);
};

export const exportToCSV = (data: ReportData): void => {
  const headers = ['Date', 'Category', 'Description', 'Emissions (kg CO‚ÇÇ)'];
  const csvContent = [
    headers.join(','),
    ...data.activities.map(activity => [
      new Date(activity.date).toLocaleDateString(),
      activity.type,
      `"${activity.description.replace(/"/g, '""')}"`,
      activity.emissions.toFixed(2)
    ].join(','))
  ].join('\n');

  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `carbon-footprint-${data.period}-${Date.now()}.csv`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const exportToJSON = (data: ReportData): void => {
  const jsonContent = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  
  link.setAttribute('href', url);
  link.setAttribute('download', `carbon-footprint-${data.period}-${Date.now()}.json`);
  link.style.visibility = 'hidden';
  
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const generateShareableReport = (stats: any, period: string): string => {
  const reduction = stats.reductionFromPrevious >= 0 ? 'reduced' : 'increased';
  const reductionText = stats.reductionFromPrevious >= 0 ? 
    `I've reduced my carbon footprint by ${stats.reductionFromPrevious.toFixed(1)}%` :
    `My carbon footprint increased by ${Math.abs(stats.reductionFromPrevious).toFixed(1)}%`;

  return `üå± My Carbon Footprint Report (${period})

üìä Total Emissions: ${stats.totalEmissions.toFixed(1)} kg CO‚ÇÇ
üìÖ Daily Average: ${stats.averageDaily.toFixed(1)} kg CO‚ÇÇ
üìà ${reductionText} compared to the previous period

üéØ Top Categories:
${Object.entries(stats.categoryBreakdown)
  .sort(([,a], [,b]) => (b as number) - (a as number))
  .slice(0, 3)
  .map(([category, emissions], index) => 
    `${index + 1}. ${category.charAt(0).toUpperCase() + category.slice(1)}: ${(emissions as number).toFixed(1)} kg CO‚ÇÇ`
  ).join('\n')}

Track your environmental impact with EcoTracker! üåç`;
};